te#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <GL/glut.h>
#include "SOIL.h"


#define PI 3.1415

#define SOLID_CLOSED_CYLINDER(QUAD, BASE, TOP, HEIGHT, SLICES, STACKS) \
glPushMatrix();\
gluCylinder(QUAD, BASE, TOP, HEIGHT, SLICES, STACKS); \
glRotatef(180, 1,0,0); \
gluDisk(QUAD, 0.0f, BASE, SLICES, 1); \
glRotatef(180, 1,0,0); \
glTranslatef(0.0f, 0.0f, HEIGHT); \
gluDisk(QUAD, 0.0f, TOP, SLICES, 1); \
glTranslatef(0.0f, 0.0f, -HEIGHT); \
glPopMatrix();

GLUquadricObj *quadratic;

GLfloat luzAmbiente[4]={0.2,0.2,0.2,1.0};
GLfloat luzDifusa[4]={0.7,0.7,0.7,1.0}; // "cor"
GLfloat luzEspecular[4]={1.0, 1.0, 1.0, 1.0};// "brilho"
//GLfloat posicaoLuz[4]={0.0, 50.0, 50.0, 1.0};
GLfloat posicaoLuz[4]={60.0, 70.0, 55.0, 1.0};

GLuint texture_id[10];

GLfloat posicao_sol[] = {60.0,70.0,55.0,1.0};
GLfloat posicao_lampada[] = {-10.0, 7.0, -46.0, 1};

float angle = 0.0f;
float deltaAngle = 0.0f;
int xOrigin = -1;

static int shoulder = 0, elbow = 0;

GLint WIDTH =800;
GLint HEIGHT=600;

// camera
GLfloat obs[3]={0.0,7.0,5.0};
GLfloat look[3]={0.0,3.0,0.0};

//Define profundidade da sala
GLfloat finalX = 50.0;

//Define altura da sala
GLfloat finalY = 60.0;

//Define largura da sala
GLfloat finalZ = 30.0;
GLfloat sentido = 15;



static int eixoy;

GLfloat origemX = -finalX;
GLfloat origemY = -finalY;
GLfloat origemZ = -finalZ;

//camera
GLfloat tetaxz=5;
GLfloat raioxz=50;

GLuint  sala, biros_esq, biros_dir, comp_esq, comp_dir, janelas_sol, janelas_entrada, grade, cadeiras;


void reshape(int width, int height){
  WIDTH=width;
  HEIGHT=height;
  glViewport(0,0,(GLint)width,(GLint)height);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  gluPerspective(80.0,width/(float)height,0.1,200.0);
  glMatrixMode(GL_MODELVIEW);
}

void compoe_divisorias_aluminio_janela1(void)
{

 	//janela1 vertical
  	glColor3f(0.8 , 0.8, 0.8); 
  	//janela1 parede vertical1
  	glPushMatrix();
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-34.0, 0, -75.0);
  	//largura(z), altura(y), espessura(x)
  	glScalef (0.1, 2, 0.06);
  	glutSolidCube (5.0);
  	glPopMatrix();


  	glPushMatrix();
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-34.0, 0, -62.0);
  	//largura(z), altura(y), espessura(x)
  	glScalef (0.1, 2, 0.06);
  	glutSolidCube (5.0);
  	glPopMatrix();

}


void compoe_divisorias_aluminio_janela2(void)
{

	GLfloat p_inicial = 0.0;

 
	for(int i = 0; i < 15; ++i)
 	{	
		if( i == 0 || i == 2)
			goto end;
    	glPushMatrix();
  		//tras/frente - cima/baixo - direita/esquerda
		glTranslatef (-35.0, 0, (-30.25 + p_inicial));
  		//largura, altura, espessura
  		glScalef (0.1, 2, 0.06);
  		glutSolidCube (5.0);
  		glPopMatrix();
		end:
		p_inicial += 6.76;

 	}

}

void compoe_janela_aluminio_janela3(void)
{

	GLfloat p_inicial = 0.0;

	for(int i = 0; i < 28; ++i)
	{
		glPushMatrix();
  		//tras/frente - cima/baixo - direita/esquerda
  		glTranslatef (-34.0, 15, -80.7 + p_inicial);
  		//largura(z), altura(y), espessura(x)
  		glScalef (0.1, 2, 0.1);
  		glutSolidCube (5.0);
  		glPopMatrix();
		p_inicial += 6.25;

	}

  	glPushMatrix();
 	//tras/frente - cima/baixo - direita/esquerda(posicao)
  	glTranslatef (-34.00, 17.0, 6.0);
  	//largura(z), altura(y), espessura(x)
  	glScalef (0.1, 0.1, 34.5);
  	glutSolidCube (5.0);
  	glPopMatrix();


}

void compoe_janela_aluminio(void)
{

  //janela1 vertical
  glColor3f(0.8 , 0.8, 0.8); 
  //janela1 parede vertical1
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (-34.0, 0, -68.2);
  //largura(z), altura(y), espessura(x)
  glScalef (0.1, 2, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();


  //janela1 terreo horizontal
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda(posicao)
  glTranslatef (-34.00, 2.0, -68.0);
  //largura, altura, espessura
  glScalef (0.1, 0.1, 5.0);
  glutSolidCube (5.0);
  glPopMatrix();


  GLfloat p_inicial = 0.0;
    for(int i = 0; i < 7; ++i){ 
  	
	//janela2 parede vertical1
  	glPushMatrix();
  	//tras/frente - cima/baixo - direita/esquerda
	glTranslatef (-35.0, 0, (-19.5 + p_inicial));
  	//largura, altura, espessura
  	glScalef (0.1, 2, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();
	

		
 }

 //janela2 terreo base
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda(posicao)
  glTranslatef (-34.00, 2.0, 18.0);
  //largura(z), altura(y), espessura(x)
  glScalef (0.1, 0.1, 20.5);
  glutSolidCube (5.0);
  glPopMatrix();

}

void compoe_grade(void){
  GLUquadricObj *quadric;
  // inicia a composicao da grade
  grade = glGenLists(1);
  glNewList(grade, GL_COMPILE);
  quadric = gluNewQuadric();
  //gluQuadricTexture(quadric, GL_TRUE);

  GLfloat p_inicial = 5.2;
  //compoe 8 grades para janela2
  for(int i = 0; i < 8; i++){
    p_inicial += 1.0;
    //grade
    glPushMatrix();
    //tras/frente - cima/baixo - direita/esquerda
    glTranslatef (-36.0, 10 - p_inicial, 18.0);
    //largura, altura, espessura
    glScalef (0.2, 0.2, 200);
    glutSolidCube (0.5);
    glPopMatrix();
  }
 
  p_inicial = 5.2; 
  //compoe 8 grades para janela1
  for(int i = 0; i < 8; i++){
    p_inicial += 1.0;
    //grade
    glPushMatrix();
    //tras/frente - cima/baixo - direita/esquerda
    glTranslatef (-36.0, 10 - p_inicial, -68.0);
    //largura, altura, espessura
    glScalef (0.2, 0.2, 47);
    glutSolidCube (0.5);
    glPopMatrix();
  }
  p_inicial = -9.8; 
  //compoe 8 grades para janela3
  for(int i = 0; i < 8; i++){
    p_inicial += 1.0;
    //grade
    glPushMatrix();
    //tras/frente - cima/baixo - direita/esquerda
    glTranslatef (-36.0, 10 - p_inicial, 5.7);
    //largura, altura, espessura
    glScalef (0.2, 0.2, 344);
    glutSolidCube (0.5);
    glPopMatrix();
  }

	//compoe  grades para porta de entrada
	for(int i = 0; i < 14; i++){
    	p_inicial += 1.0;
    	//grade
    	glPushMatrix();
    	//tras/frente - cima/baixo - direita/esquerda
    	glTranslatef (-34.2, 3.5 - p_inicial, -48.7);
    	//largura, altura, espessura
    	glScalef (0.2, 0.2, 15);
    	glutSolidCube (0.5);
    	glPopMatrix();
  }


}

void compoe_texturas(GLfloat x_trans, GLfloat y_trans, GLfloat  z_trans,
GLfloat x_scalef, GLfloat y_scalef, GLfloat z_scalef, int tex_id, GLfloat value_cube)
{
  glEnable(GL_TEXTURE_GEN_S);
  glEnable(GL_TEXTURE_GEN_T);
  glPushMatrix();
  //glColor3f(1,1,1);
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (z_trans, y_trans, x_trans);
  //espessura, altura, largura
  glScalef (z_scalef, y_scalef, x_scalef);
  glBindTexture(GL_TEXTURE_2D, texture_id[tex_id]);
  glutSolidCube (10.0);
	//glutSolidCube(value_cube);
  glPopMatrix();
  glDisable(GL_TEXTURE_GEN_S);
  glDisable(GL_TEXTURE_GEN_T);


}
void compoe_cadeiras1(void){
  GLUquadricObj *quadric;
  // inicia a composicao do computador
  cadeiras = glGenLists(1);
  glNewList(cadeiras, GL_COMPILE);
  quadric = gluNewQuadric();
  gluQuadricTexture(quadric, GL_TRUE);

  GLfloat lado, atras = 0;
  //compoe cadeiras, 4 colunas
  for(int i = 0; i<1; i++){
    atras = i * 9.5;
    //6 cadeiras lado a lado - 3 da cada lado
    for(int j=0; j<6; j++){
      lado = j*6.0;
      if (j>2){
        lado = lado + 8;
      }
	




	//Aumentar em 20
	
	
      //pe cadeira - atrás esquerda
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      gluQuadricTexture(quadric, GL_TRUE);
      glPushMatrix();
      glRotatef(90,1,0,0);
      //-tras/frente+ - +esquerda/direita- - +baixo/cima-
	  glTranslatef (8-lado, -52.8-atras, 6.8);
      SOLID_CLOSED_CYLINDER(quadric, 0.1, 0.1, 3.3, 30, 5)
      gluDeleteQuadric(quadric);
      glPopMatrix();


      //pe cadeira - atrás direita
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      gluQuadricTexture(quadric, GL_TRUE);
      glPushMatrix();
      glRotatef(90,1,0,0);
      //-tras/frente+ - +esquerda/direita- - +baixo/cima-
      glTranslatef (6-lado,-52.8-atras, 6.8);
      SOLID_CLOSED_CYLINDER(quadric, 0.1, 0.1, 3.3, 30, 5)
      gluDeleteQuadric(quadric);
      glPopMatrix();


      //pe cadeira - frente esquerda
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      gluQuadricTexture(quadric, GL_TRUE);
      glPushMatrix();
      glRotatef(90,1,0,0);
      //-tras/frente+ - +esquerda/direita- - +baixo/cima-
      glTranslatef (8-lado, -54.2-atras, 6.8);
      SOLID_CLOSED_CYLINDER(quadric, 0.1, 0.1, 3.3, 30, 5)
      gluDeleteQuadric(quadric);
      glPopMatrix();


      //pe cadeira - frente direita
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      gluQuadricTexture(quadric, GL_TRUE);
      glPushMatrix();
      glRotatef(90,1,0,0);
      //-tras/frente+ - +esquerda/direita- - +baixo/cima-
      glTranslatef (6-lado, -54.2-atras, 6.8);
      SOLID_CLOSED_CYLINDER(quadric, 0.1, 0.1, 3.3, 30, 5)
      gluDeleteQuadric(quadric);
      glPopMatrix();

      //assento cadeira
      glPushMatrix();  
      //+tras/frente- - +baixo/cima- - - +esquerda/direita-
      glTranslatef (7-lado, -6.8, -54.3-atras);
      glScalef(4.0,0.3,3.0);
      quadric=gluNewQuadric();
      glColor3f(0.3,0.5,1);
     // glDisable(GL_TEXTURE_2D);
      gluSphere(quadric,0.5,15,12);
      glPopMatrix();

      //apoio encosto cadeira - vertical
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      glPushMatrix();   
      glColor3f(0,0,0);
      glRotatef(90,1,0,0);  
      glTranslatef (7-lado, -55.5-atras, 5);
      //tras/frente - direita/esquerda - cima/baixo 
      SOLID_CLOSED_CYLINDER(quadric, 0.15, 0.15, 2.2, 30, 1)
      //gluDeleteQuadric(quadric);
      glPopMatrix();

      //encosto cadeira
      glPushMatrix();  
      //+tras/frente- - +baixo/cima- - - +esquerda/direita-
      glTranslatef (7-lado, -4.75, -55.5-atras);
      glRotatef(-15,1,0,1);
      glScalef(4,3,0.5);
      quadric=gluNewQuadric();
      glColor3f(0.3,0.5,1);
     // glDisable(GL_TEXTURE_2D);
      gluSphere(quadric,0.5,15,12);
      glPopMatrix();

      //apoio encosto cadeira - horizontal
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      glPushMatrix();   
      glColor3f(0,0,0);
      glTranslatef (7-lado, -7, -56-atras);
      //tras/frente - cima/baixo - direita/esquerda 
      SOLID_CLOSED_CYLINDER(quadric, 0.15, 0.15, 2.2, 30, 1)
      gluDeleteQuadric(quadric);
      glPopMatrix();
    }
  }
}

void compoe_cadeiras2(void){
  GLUquadricObj *quadric;
  // inicia a composicao do computador
  cadeiras = glGenLists(1);
  glNewList(cadeiras, GL_COMPILE);
  quadric = gluNewQuadric();
  gluQuadricTexture(quadric, GL_TRUE);

  GLfloat lado, atras = 0;
  //compoe cadeiras, 4 colunas
  for(int i = 0; i<1; i++){
    atras = i * 10.5;
    //6 cadeiras lado a lado - 3 da cada lado
    for(int j=0; j<5; j++){
      lado = j*8.7;
      if (j>2){
        lado = lado + 3;
      }
	
	//Aumentar em 20
	//pe cadeira - atrás esquerda
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      gluQuadricTexture(quadric, GL_TRUE);
      glPushMatrix();
      glRotatef(90,1,0,0);
      //-tras/frente+ - +esquerda/direita- - +baixo/cima-
	  glTranslatef (72-lado, -52.8-atras, 6.8);
      SOLID_CLOSED_CYLINDER(quadric, 0.1, 0.1, 3.3, 30, 5)
      gluDeleteQuadric(quadric);
      glPopMatrix();


      //pe cadeira - atrás direita
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      gluQuadricTexture(quadric, GL_TRUE);
      glPushMatrix();
      glRotatef(90,1,0,0);
      //-tras/frente+ - +esquerda/direita- - +baixo/cima-
      glTranslatef (70-lado,-52.8-atras, 6.8);
      SOLID_CLOSED_CYLINDER(quadric, 0.1, 0.1, 3.3, 30, 5)
      gluDeleteQuadric(quadric);
      glPopMatrix();


      //pe cadeira - frente esquerda
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      gluQuadricTexture(quadric, GL_TRUE);
      glPushMatrix();
      glRotatef(90,1,0,0);
      //-tras/frente+ - +esquerda/direita- - +baixo/cima-
      glTranslatef (72-lado, -54.2-atras, 6.8);
      SOLID_CLOSED_CYLINDER(quadric, 0.1, 0.1, 3.3, 30, 5)
      gluDeleteQuadric(quadric);
      glPopMatrix();


      //pe cadeira - frente direita
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      gluQuadricTexture(quadric, GL_TRUE);
      glPushMatrix();
      glRotatef(90,1,0,0);
      //-tras/frente+ - +esquerda/direita- - +baixo/cima-
      glTranslatef (70-lado, -54.2-atras, 6.8);
      SOLID_CLOSED_CYLINDER(quadric, 0.1, 0.1, 3.3, 30, 5)
      gluDeleteQuadric(quadric);
      glPopMatrix();


      //assento cadeira
      glPushMatrix();  
      //+tras/frente- - +baixo/cima- - - +esquerda/direita-
      glTranslatef (70.5-lado, -6.8, -54.3-atras);
      glScalef(4.0,0.3,3.0);
      quadric=gluNewQuadric();
      glColor3f(0.3,0.5,1);
     // glDisable(GL_TEXTURE_2D);
      gluSphere(quadric,0.5,15,12);
      glPopMatrix();

      //apoio encosto cadeira - vertical
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      glPushMatrix();   
      glColor3f(0,0,0);
      glRotatef(90,1,0,0);  
      glTranslatef (70-lado, -55.7-atras, 5.0);
      //tras/frente - direita/esquerda - cima/baixo 
      SOLID_CLOSED_CYLINDER(quadric, 0.15, 0.15, 2.2, 30, 1)
      //gluDeleteQuadric(quadric);
      glPopMatrix();

      //encosto cadeira
      glPushMatrix();  
      //+tras/frente- - +baixo/cima- - - +esquerda/direita-
      glTranslatef (70-lado, -4.75, -55.5-atras);
      glRotatef(-15,1,0,1);
      glScalef(4,3,0.5);
      quadric=gluNewQuadric();
      glColor3f(0.3,0.5,1);
     // glDisable(GL_TEXTURE_2D);
      gluSphere(quadric,0.5,15,12);
      glPopMatrix();

      //apoio encosto cadeira - horizontal
      quadric = gluNewQuadric();
      gluQuadricDrawStyle(quadric, GLU_FILL);
      gluQuadricOrientation(quadric, GLU_INSIDE);
      glPushMatrix();   
      glColor3f(0,0,0);
      glTranslatef (70-lado, -7, -56-atras);
      //tras/frente - cima/baixo - direita/esquerda 
      SOLID_CLOSED_CYLINDER(quadric, 0.15, 0.15, 2.2, 30, 1)
      gluDeleteQuadric(quadric);
      glPopMatrix();
    }
  }
}



/*void OnRender() {
  glClearColor(1.0f, 0.0f, 0.0f, 1.0f); // Clear the background
  glClear(GL_COLOR_BUFFER_BIT); //Clear the colour buffer
  glLoadIdentity(); // Load the Identity Matrix to reset our drawing locations

  glRotatef(45, 0.0f, 1.0f, 0.0f); // Rotate our object around the y axis on yRotationAngle radians

  // here *render* your cylinder (create and delete it in the other place. Not
  // while rendering)
  gluCylinder(quadratic,0.1f,0.1f,3.0f,32,32);

  glFlush(); // Flush the OpenGL buffers to the window  
}*/


void drawCylinder(int SLICES, int STACKS, float SCALE_X, float SCALE_Y, float
SCALE_Z) {
    glEnable(GL_NORMALIZE);
	
	GLfloat aux = 0.0;
	//Esquerda
	glColor3f(0.372549, 0.623529, 0.623529); // azul
	for(int i = 0; i < 1000; ++i)
	{
		glPushMatrix();
    	glTranslatef(-10,28 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	glColor3f(1.0, 0.8, 0.0);
	aux = 0.0;

	for(int i = 0; i < 300; ++i)
	{
		glPushMatrix();
    	glTranslatef(-10,20 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}

	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,19 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}

	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,18 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,15 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,14 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,13 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,10 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10, 9 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,8 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}

	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,5 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,4 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}

	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,3 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}

	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,0 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-1 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-2 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-5 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-6 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 300; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-7 + aux,-81);
    	glRotatef(90,1.,0.0, 0.0);
		gluPartialDisk(quadratic, 15.0, 16.0, 20, 4, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	//direita 1
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,5 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,4 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,3 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,0 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-1 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-2 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-4 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-6 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-7 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-8 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-10,-9 + aux,75);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(90,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 6.0, 7.0, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}

	//parte2
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,5 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,4 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,3 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,2 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,1 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,-2 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,-3 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,-4 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,-6 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,-7 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
		for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,-8 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}
	aux = 0.0;
	for(int i = 0; i < 250; ++i)
	{
	
		glPushMatrix();
    	glTranslatef(-22,-9 + aux,87);
    	glRotatef(270,1.0,0.0, 0.0);
		glRotatef(270,0.0,0.0, 1.0);
		gluPartialDisk(quadratic, 5.5, 6.5, 20, 50, 90.0, 180.0);	
		glPopMatrix();
		aux -= 0.005;
	}

}


void compoe_portas_estaticas(void)
{
//	glTranslatef (60.5, 10.0, 43.0);
	//glNormal3f(1.0, 1.0f, 1.0f);
	//compoe_texturas(17.5, 0.0, 11.0, 1.1, 2.0, 0.1, 4, 7.0);
 	glBindTexture(GL_TEXTURE_2D, texture_id[4]);   // choose the texture to use
	glTranslatef (60.5, 10.0, 43.0);
    glBegin(GL_QUADS);		                // begin drawing a cube
 	   
	/*glTexCoord2f(0.0f, 0.0f); glVertex3f(-20.0f, -20.0f,  20.0f);	// Bottom Left Of The Texture and Quad
    glTexCoord2f(1.0f, 0.0f); glVertex3f( 20.0f, -20.0f,  20.0f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(1.0f, 1.0f); glVertex3f( 20.0f,  20.0f,  20.0f);	// Top Right Of The Texture and Quad
    glTexCoord2f(0.0f, 1.0f); glVertex3f(-20.0f,  20.0f,  20.0f);	// Top Left Of The Texture and Quad
 	*/
	glTexCoord2f(6.0f, 5.0f); glVertex3f( 10.5f, -10.5f, -10.5f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(6.0f, 6.0f); glVertex3f( 10.5f,  10.5f, -10.5f);	// Top Right Of The Texture and Quad
    glTexCoord2f(5.0f, 6.0f); glVertex3f( 10.5f,  10.5f,  10.5f);	// Top Left Of The Texture and Quad
    glTexCoord2f(5.0f, 5.0f); glVertex3f( 10.5f, -10.5f,  10.5f);	// Bottom Left Of The Texture and Quad
    	
   
   /* // Back Face
    glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad
    glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Left Of The Texture and Quad
    glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Bottom Left Of The Texture and Quad
	
    // Top Face
    glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	// Top Left Of The Texture and Quad
    glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f,  1.0f,  1.0f);	// Bottom Left Of The Texture and Quad
    glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f,  1.0f,  1.0f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad
    
    // Bottom Face       
    glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Top Right Of The Texture and Quad
    glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Top Left Of The Texture and Quad
    glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);	// Bottom Left Of The Texture and Quad
    glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);	// Bottom Right Of The Texture and Quad
    
    // Right face
    glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f, -1.0f, -1.0f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f, -1.0f);	// Top Right Of The Texture and Quad
    glTexCoord2f(0.0f, 1.0f); glVertex3f( 1.0f,  1.0f,  1.0f);	// Top Left Of The Texture and Quad
    glTexCoord2f(0.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  1.0f);	// Bottom Left Of The Texture and Quad
    
    // Left Face
    glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);	// Bottom Left Of The Texture and Quad
    glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  1.0f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f,  1.0f,  1.0f);	// Top Right Of The Texture and Quad
    glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f, -1.0f);	// Top Left Of The Texture and Quad
    */

    glEnd();
                                    // done with the polygon.
	glTranslatef (0.0, 4.0, -43.0);
	glBindTexture(GL_TEXTURE_2D, texture_id[4]);   // choose the texture to use.
    glBegin(GL_QUADS);		                // begin drawing a cube
 	   
	/*glTexCoord2f(0.0f, 0.0f); glVertex3f(-20.0f, -20.0f,  20.0f);	// Bottom Left Of The Texture and Quad
    glTexCoord2f(1.0f, 0.0f); glVertex3f( 20.0f, -20.0f,  20.0f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(1.0f, 1.0f); glVertex3f( 20.0f,  20.0f,  20.0f);	// Top Right Of The Texture and Quad
    glTexCoord2f(0.0f, 1.0f); glVertex3f(-20.0f,  20.0f,  20.0f);	// Top Left Of The Texture and Quad
 	*/
	glTexCoord2f(1.0f, 0.0f); glVertex3f( 10.5f, -10.5f, -10.5f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(1.0f, 1.0f); glVertex3f( 10.5f,  10.5f, -10.5f);	// Top Right Of The Texture and Quad
    glTexCoord2f(0.0f, 1.0f); glVertex3f( 10.5f,  10.5f,  10.5f);	// Top Left Of The Texture and Quad
    glTexCoord2f(0.0f, 0.0f); glVertex3f( 10.5f, -10.5f,  10.5f);	// Bottom Left Of The Texture and Quad
    	
	glEnd();
	
	//glTranslatef (-10.0, 0.0, -50.0);
	//glBindTexture(GL_TEXTURE_2D, texture_id[4]);   // choose the texture to use.
    glBegin(GL_QUADS);		                // begin drawing a cube
 	  
	glTexCoord2f(300.0f, 300.0f); glVertex3f(-7.5f, -7.5f, -7.5f);	// Bottom Left Of The Texture and Quad
    glTexCoord2f(301.0f, 300.0f); glVertex3f(-7.5f, -7.5f,  7.5f);	// Bottom Right Of The Texture and Quad
    glTexCoord2f(301.0f, 301.0f); glVertex3f(-7.5f,  7.5f,  7.5f);	// Top Right Of The Texture and Quad
    glTexCoord2f(300.0f, 301.0f); glVertex3f(-7.5f,  7.5f, -7.5f);	// Top Left Of The Texture and Quad
    	
	glEnd();


   
	glTranslatef(-18,-3,-15); // just to move away from previous drawing

	glNormal3f(1.0, 1.0f, 1.0f);

	/*glBegin(GL_QUADS);// -Z-X PLane

	glColor3f(1,1,0); 		
	glTexCoord2f(0.0f, 0.0f); 	glVertex3f(-11,-0.5, -7.0);	
	glTexCoord2f(1.0f, 0.0f);	glVertex3f(-11, -0.5, 0.0);	
	glTexCoord2f(1.0f, 1.0f);	glVertex3f(0, 0.5, 0.0);	
	glTexCoord2f(0.0f, 1.0f);	glVertex3f(0, 0.5,-7.0);

	glEnd();
 */


}
void abre_porta(void)
{
	//porta modelo
  /*glColor3f(1.0,1.0,0.0);
  glPushMatrix();
  //eixo de rotação
  glTranslatef (4.3, -2.4, 18.25);
  glRotatef ((GLfloat) eixoy, 0.0, 1.0, 0.0);
  glTranslatef (-4.3, 2.4, -18.25);

  glTranslatef (4.3, -2.4, 15.5);
  //espessura, altura, largura
  glScalef (0.1, 3.8, 1.5);
  glutSolidCube (4.0);
  
  glPopMatrix();
  glPopMatrix();  
*/
	
	//porta entrada parte2
	glColor3f(0, 0, 0);
  	glPushMatrix();
  	//eixo de rotação
	glTranslatef (-33.5, -1.8, -40.0);
  	glRotatef ((GLfloat) eixoy, 0.0, 1.0, 0.0);
  	glTranslatef (33.5, 1.8, 40.75);

	//glTranslatef (-33.5, -1.8, -40.0);
  	//espessura, altura, largura
  	glScalef (0.1, 4, 2.45);
  	glutSolidCube (5.0);
	glPopMatrix();



}
void compoe_sala(void){
  GLUquadricObj *quadric;
  

  /* inicia a composicao da sala */
  sala = glGenLists(1);
  glNewList(sala, GL_COMPILE);

  quadric = gluNewQuadric();
  //gluQuadricTexture(quadric, GL_TRUE);
	

  glColor3f(1,1,1);
	compoe_portas_estaticas();
  //janela sobre a porta
  /*glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (4.3, 7.5, 15.5);
  //espessura, altura, largura
  glScalef (0.1, 1.0, 1.5);
  glutWireCube (4.0);
  glPopMatrix();*/

  //janela do lado da janela sobre a porta
  /*glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (4.3, 7.5, 11.2);
  //espessura, altura, largura
  glScalef (0.1, 1.0, 0.5);
  glutWireCube (4.0);
  glPopMatrix();*/
  //janela lateral do lado da porta
  /*glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (4.3, -0.2, 11.2);
  //espessura, altura, largura
  glScalef (0.1, 2.68, 0.5);
  glutWireCube (4.0);
  glPopMatrix();*/

  //janela lateral em baixo da janela lateral do lado da porta
  /*glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (4.3, -7.8, 11.2);
  //espessura, altura, largura
  glScalef (0.1, 1.0, 0.5);
  glutWireCube (4.0);
  glPopMatrix();*/

  //tela do projetor
  //glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  //glTranslatef (-16, -1.5, 18.5);
  //largura, altura, espessura
  //glScalef (3, 2.8, 0.05);
  //glutWireCube (5.0);
  //glPopMatrix();

  //quadro
  /*glPushMatrix();
  glColor3f(0.75,0.75,0.75);
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (-15.7, 1., 18.5);
  //largura, altura, espessura
  glScalef (4, 1.5, 0.05);
  glutSolidCube (5.0);
  glPopMatrix();*/

  
  //teto1
  glColor3f(1,1,1);
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (16.5, 10.0, 6.0);
  //largura(z), altura(y), espessura(x)
  glScalef (20.5, -0.1, 34);
  glutSolidCube (5.0);
  glPopMatrix();

//teto2
  glColor3f(0.8,0.8,0.8);
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (16.0, 21.0, 6.0);
  //largura(z), altura(y), espessura(x)
  glScalef (22.5, -0.1, 34);
  glutSolidCube (5.0);
  glPopMatrix();


  glColor3f(3, 3, 3); 
  //janela1 parede vertical1
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (-35.0, 0, -80.7);
  //largura(z), altura(y), espessura(x)
  glScalef (0.5, 2, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();

 
  //janela1 parede vertical2
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (-35.0, 0, -55.7);
  //largura, altura, espessura
  glScalef (0.5, 2, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();

  //janela2 parede vertical1
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (-35.0, 0, -33.0);
  //largura, altura, espessura
  glScalef (0.5, 2, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();

  //janela2 parede vertical2
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (-35.0, 0, 68.7);
  //largura, altura, espessura
  glScalef (0.5, 2, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();


  //janela3 primeiro andar base
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda(posicao)
  glTranslatef (-35.00, 10.0, 6.0);
  //largura(z), altura(y), espessura(x)
  glScalef (0.5, 0.1, 34.8);
  glutSolidCube (5.0);
  glPopMatrix();

  //janela3 primeiro andar superior
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda(posicao)
  glTranslatef (-35.00, 20.0, 6.0);
  //largura(z), altura(y), espessura(x)
  glScalef (0.5, 0.1, 34.8);
  glutSolidCube (5.0);
  glPopMatrix();

  //janela3 parede vertical1
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (-35.0, 15, -80.7);
  //largura(z), altura(y), espessura(x)
  glScalef (0.5, 2, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();

  //janela3 parede vertical2
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (-35.0, 15, 93.0);
  //largura, altura, espessura
  glScalef (0.5, 2, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();



  //glColor3f(0.8 ,0.8, 0.8);   
  //janela1 terreo base
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda(posicao)
  glTranslatef (-35.00, -5.0, -68.0);
  //largura, altura, espessura
  glScalef (0.5, 0.1, 5.0);
  glutSolidCube (5.0);
  glPopMatrix();


  //janela1 terreo superior
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda(posicao)
  glTranslatef (-35.00, 5.0, -68.0);
  //largura, altura, espessura
  glScalef (0.5, 0.1, 5.0);
  glutSolidCube (5.0);
  glPopMatrix();


  //janela2 terreo base
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda(posicao)
  glTranslatef (-35.00, -5.0, 18.0);
  //largura(z), altura(y), espessura(x)
  glScalef (0.5, 0.1, 20.5);
  glutSolidCube (5.0);
  glPopMatrix();


  //janela2 terreo superior
  glPushMatrix();
  //tras/frente - cima/baixo - direita/esquerda(posicao)
  glTranslatef (-35.00, 5.0, 18.0);
  //largura(z), altura(y), espessura(x)
  glScalef (0.5, 0.1, 20.5);
  glutSolidCube (5.0);
  glPopMatrix();


  //piso
 	compoe_texturas(6.0, -9.7, 13.5, 19, 0.3, 12.0, 1, 0.1);
  /*glPushMatrix();
  glColor3f(0.85,0.85,0.85);
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (16.5, -9.7, 6.0);
  //largura, altura, espessura
  glScalef (24.0, 0.3, 36);
  glutSolidCube (5.0);
  glPopMatrix();
*/
	//passagem
	compoe_texturas(-44.0, -9.0, -74.0, 3.0, 0.3, 8.05, 0, 5.0);

	//grama1
    compoe_texturas(34.0, -10.0, -72.85, 12.5, 0.1, 6.05, 2, 0.1);
 	/*glPushMatrix();
	glColor4f(.23,.78,.32,0.5);
  	//glColor3f(0.419608, 0.556863, 0.137255);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-72.85, -10.0, 50.2);
  	//largura, altura, espessura
  	glScalef (10.05, 0.1, 27.5);
  	glutSolidCube (5.0);
  	glPopMatrix();
*/
	//grama2
	compoe_texturas(-75.0, -10.0, -72.85, 4.5, 0.1, 6.05, 2, 0.1);
  	/*glPushMatrix();
	glColor4f(.23,.78,.32,0.5);
  	//glColor3f(0.419608, 0.556863, 0.137255);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-40.85, -10.0, -75.0);
  	//largura, altura, espessura
  	glScalef (20.05, 0.1, 9.5);
  	glutSolidCube (5.0);
  	glPopMatrix();
*/
	glColor3f( 1.0, 1.0,1.0);
	compoe_texturas(-56.0, -0.1, -11.4, 0.1, 2.0, 4.3, 3, 5.0);
	/*//parede esquerda interna1
  	glPushMatrix();
  	glColor3f( 1.0, 1.0,1.0);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-12, 0.0, -56.0);
  	//largura, altura, espessura
  	glScalef (8.7, 4.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();
*/
	//parede esquerda interna2
  	glPushMatrix();
  	glColor3f( 1.0, 1.0,1.0);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (47.5, 0.0, -56.0);
  	//largura, altura, espessura
  	glScalef (7.5, 4.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede inteira bebedouro
	compoe_texturas(-68.0, 0.0, 28.5, 2.4, 2.0, 0.1, 3, 5.0);
  	/*glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (28.5, 0.0, -68.0);
  	//largura, altura, espessura
  	glScalef (0.1, 4.0 , 4.8);
  	glutSolidCube (5.0);
  	glPopMatrix();
*/
	//parede inteira escada
	compoe_texturas(-68.0, 0.0, 10.0, 2.5, 2.0, 0.1, 3, 5.0);
  	/*glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (10.0, 0.0, -68.0);
  	//largura, altura, espessura
  	glScalef (0.1, 4.0 , 4.8);
  	glutSolidCube (5.0);
  	glPopMatrix();
*/
	//parede direita interna1
  	glPushMatrix();
  	glColor3f( 1.0, 1.0,1.0);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-12, 0.0, -33.0);
  	//largura, altura, espessura
  	glScalef (8.7, 4.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();


	//parede direita interna2
  	glPushMatrix();
  	glColor3f( 1.0, 1.0,1.0);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (47.5, 0.0, -33.0);
  	//largura, altura, espessura
  	glScalef (7.5, 4.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede interna corredor professores
	compoe_texturas(17.5, 0.0, 10.0, 10.1, 2.0, 0.1, 3, 5.0);
	  	/*glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (10, 0.0, 17.5);
  	//largura, altura, espessura
  	glScalef (0.1, 4.0 , 20.2);
  	glutSolidCube (5.0);
  	glPopMatrix();
*/
	//parede interna corredor professores2
	compoe_texturas(29.5, 0.0, 29.5, 12.5, 2.0, 0.1, 3, 3.0);
  /*	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (28.5, 0.0, 29.5);
  	//largura, altura, espessura
  	glScalef (0.1, 4.0 , 25.0);
  	glutSolidCube (5.0);
  	glPopMatrix();
*/


	//parede interna final professores
  	glPushMatrix();
  	glColor3f( 1.0, 1.0,1.0);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-12, 0.0, 68.0);
  	//largura, altura, espessura
  	glScalef (8.7, 4.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede direita interna final corredor
  	glPushMatrix();
  	glColor3f( 1.0, 1.0,1.0);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (38.7, 0.0, 92.0);
  	//largura, altura, espessura
  	glScalef (11.1, 4.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();



  	//parede esquerda1
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (16.5, 4.8, -80.7);
  	//largura, altura, espessura
  	glScalef (20.0, 6.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();

  //parede esquerda1.1
  glPushMatrix();
  glColor3f(0.372549, 0.623529, 0.623529);
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (14.2, 22.5, -80.7);
  //largura, altura, espessura
  glScalef (21.0, 1, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();

//parede direita1.1
  glPushMatrix();
  glColor3f(0.372549, 0.623529, 0.623529);
  //tras/frente - cima/baixo - direita/esquerda
  glTranslatef (14.2, 22.5, 92.7);
  //largura, altura, espessura
  glScalef (21.0, 1, 0.1);
  glutSolidCube (5.0);
  glPopMatrix();



	//parede traseira
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (66.5, 4.8, 6.0);
  	//largura, altura, espessura
  	glScalef (0.1, 6.1, 34.8);
  	glutSolidCube (5.0);
  	glPopMatrix();


	//vidro janela1
  	glPushMatrix();
  	glColor4f( 0.8, 0.8, 0.8, 0.3);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-33.5, 0, -68.1);
  	//largura, altura, espessura
  	glScalef (0.1, 2, 5.0);
  	glutSolidCube (5.0);
  	glPopMatrix();
	

	//parede frontal parte1.1
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-33.5, 7.5, -67.2);
  	//largura, altura, espessura
  	glScalef (0.1, 1, 5.6);
  	glutSolidCube (5.0);
  	glPopMatrix();
	
	//parede frontal parte1.2
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-33.5, -7.5, -67.2);
  	//largura, altura, espessura
  	glScalef (0.1, 1, 5.6);
  	glutSolidCube (5.0);
  	glPopMatrix();

		
	//parede frontal parte1.3
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-33.5, 0.0, -54.5);
  	//largura, altura, espessura
  	glScalef (0.1, 2, 0.5);
  	glutSolidCube (5.0);
  	glPopMatrix();


	//parede frontal parte2.1
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-33.5, 7.5, 16.0);
  	//largura, altura, espessura
  	glScalef (0.1, 1, 31);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede frontal parte2.2
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(1,1,1);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-33.5, -7.5, 16.0);
  	//largura, altura, espessura
  	glScalef (0.1, 1, 21);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede frontal parte2.3
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-33.5, 0.0, -34.5);
  	//largura, altura, espessura
  	glScalef (0.1, 2, 0.7);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede frontal parte3
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
 	//glColor3f(0,0,0);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-33.5, 7.5, -45.0);
  	//largura, altura, espessura
  	glScalef (0.1, 1, 3.4);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede frontal parte4
  	glPushMatrix();
  	//glColor3f( 0.858824, 0.858824, 0.439216);
 	glColor3f(0.372549, 0.623529, 0.623529); // azul
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-38.5, 22.5, 6.3);
  	//largura, altura, espessura
  	glScalef (0.1, 1, 34.7);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede traseira parte2
  	glPushMatrix();
  	//glColor3f( 0.858824, 0.858824, 0.439216);
 	glColor3f(0.372549, 0.623529, 0.623529); // azul
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (66.5, 22.5, 6.3);
  	//largura, altura, espessura
  	glScalef (0.1, 1, 34.7);
  	glutSolidCube (5.0);
  	glPopMatrix();



	//porta entrada parte1
	glColor3f(0.8, 0.8, 0.8);
  	glPushMatrix();
  	//eixo de rotação
  	//glTranslatef (4.3, -2.4, 18.25);
  	//glRotatef ((GLfloat) eixoy, 0.0, 1.0, 0.0);
  	//glTranslatef (-4.3, 2.4, -18.25);
  	//glTranslatef (4.3, -2.4, 15.5);
	glTranslatef (-33.5, -1.8, -50.0);
  	//espessura, altura, largura
  	glScalef (0.1, 4, 2.45);
  	glutSolidCube (4.0);
  	glPopMatrix();

	//porta entrada parte2
	/*glColor3f(0.8, 0.8, 0.8);
  	glPushMatrix();
  	//eixo de rotação
  	//glTranslatef (4.3, -2.4, 18.25);
  	//glRotatef ((GLfloat) eixoy, 0.0, 1.0, 0.0);
  	//glTranslatef (-4.3, 2.4, -18.25);
  	//glTranslatef (4.3, -2.4, 15.5);
	glTranslatef (-33.5, -1.8, -40.0);
  	//espessura, altura, largura
  	glScalef (0.1, 4, 2.45);
  	glutSolidCube (4.0);
  	glPopMatrix();*/



  	/*//parede direita1
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-12.0, 12.5, 68.7);
  	//largura, altura, espessura
  	glScalef (8.9, 3.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();*/

	//parede direita2
  	glPushMatrix();
  	glColor3f( 0.858824, 0.858824, 0.439216);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (16.5, 12.5, 93.0);
  	//largura, altura, espessura
  	glScalef (20, 3.0, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();
	
	//parede direita3
  	glPushMatrix();
	glColor3f(1.0, 0.8, 0.0);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-5.5, 2.4, 93.0);
  	//largura, altura, espessura
  	glScalef (6.3, 1.1, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();

	//parede direita4
  	glPushMatrix();
	glColor3f(1.0, 0.8, 0.0);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-5.5, -3.6, 93.0);
  	//largura, altura, espessura
  	glScalef (6.3, 0.7, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();
	
	//parede direita5
  	glPushMatrix();
	glColor3f(1.0, 0.8, 0.0);
  	//tras/frente - cima/baixo - direita/esquerda
  	glTranslatef (-5.5, -8.3, 93.0);
  	//largura, altura, espessura
  	glScalef (6.3, 0.8, 0.1);
  	glutSolidCube (5.0);
  	glPopMatrix();

	compoe_cadeiras1();
	compoe_cadeiras2();

//gluCylinder(qobj, 1.0, 1.0, 0.4, 1, 16);
	//GLUquadricObj *quadratic;
	//quadratic = gluNewQuadric();
	//glRotatef(90.0f, 0.0f, 1.0f, 0.0f);
	//gluCylinder(quadratic,0.1f,0.1f,3.0f,32,32);
	
	quadratic = gluNewQuadric();
	//OnRender();
	drawCylinder(90, 100, 6.5, 8.6, 10.7);

  glColor3f(0,0,1.0);
  compoe_grade();
  compoe_janela_aluminio();
  compoe_janela_aluminio_janela3();
  compoe_divisorias_aluminio_janela1();
  compoe_divisorias_aluminio_janela2();
	//compoe_texturas();
  glColor3f(1.0,1.0,1.0);

  //compoe_parede_exterior();
  //compoe_parede_entrada();

  //compoe_janelas_sol();
  //compoe_janelas_entrada();

  //compoe_biros_esquerdo();
  //compoe_biros_direito();
  glColor3f(0,0,0);
  //compoe_computador_esq();
  //compoe_computador_dir();

  

  glEndList();
}

void display(void){
  //glEnable(GL_DEPTH_TEST);
  glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glEnable (GL_BLEND);
	glShadeModel(GL_SMOOTH);
  glDepthMask(GL_TRUE);
  glClearColor(0.5,0.5,0.5,0.5);
  glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
  
  glPushMatrix();

  /* calcula a posicao do observador */
  obs[0]=raioxz*cos(2*PI*tetaxz/360);
  obs[2]=raioxz*sin(2*PI*tetaxz/360);
  gluLookAt(obs[0],obs[1],obs[2],look[0],look[1],look[2],0.0,1.0,0.0);
glShadeModel(GL_SMOOTH);
  glCallList(sala);
  glCallList(biros_esq);
  glCallList(biros_dir);
  glCallList(comp_esq);
  glCallList(comp_dir);
  glCallList(janelas_sol);
  glCallList(janelas_entrada);
  glCallList(grade);
  glCallList(cadeiras);

	//lampada
	glPushMatrix();
	glColor3f(1.0, 1.0, 0.0);
 	//tras/frente - cima/baixo - direita/esquerda(posicao)
  	glTranslatef (-10, 7, -46);
  	//largura(z), altura(y), espessura(x)
  	glScalef (1, 1, 1);
  	glutSolidSphere (0.5,16,16);
  	glPopMatrix();


	
  //porta
  /*glColor3f(1.0,1.0,0.0);
  glPushMatrix();
  
  //eixo de rotação
  glTranslatef (4.3, -2.4, 18.25);
  glRotatef ((GLfloat) eixoy, 0.0, 1.0, 0.0);
  glTranslatef (-4.3, 2.4, -18.25);

  glTranslatef (4.3, -2.4, 15.5);
  //espessura, altura, largura
  glScalef (0.1, 3.8, 1.5);
  glutSolidCube (4.0);
  
  glPopMatrix();
  glPopMatrix();  
*/

	//porta entrada parte2
	glColor3f(0.8, 0.8, 0.8);
  	glPushMatrix();

  	//eixo de rotação
  	glTranslatef (-33.5, -1.8, -37.25);
  	glRotatef ((GLfloat) eixoy, 0.0, 1.0, 0.0);
  	glTranslatef (33.5, 1.8, 37.25);

	glTranslatef (-33.5, -1.8, -40.0);
  	//espessura, altura, largura
  	glScalef (0.1, 4, 2.45);
  	glutSolidCube (4.0);

  	glPopMatrix();
	glPopMatrix();



  glutSwapBuffers();
}

void mouseButton(int button, int state, int x, int y) {

	// only start motion if the left button is pressed
	if (button == GLUT_LEFT_BUTTON) {

		// when the button is released
		if (state == GLUT_UP) {
			angle += deltaAngle;
			xOrigin = -1;
		}
		else  {// state = GLUT_DOWN
			xOrigin = x;
		}
	}
	glutPostRedisplay();

}

void mouseMove(int x, int y) {
	// this will only be true when the left button is down
	if (xOrigin >= 0) {

		// update deltaAngle
		deltaAngle = (x - xOrigin) * 0.001f;

		// update camera's direction

		tetaxz = sin(angle + deltaAngle);
		raioxz = -cos(angle + deltaAngle);


//		lx = sin(angle + deltaAngle);
//		lz = -cos(angle + deltaAngle);
	}
}


void GerenciaMouse(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON)
    	if (state == GLUT_DOWN) {
                  // Troca o tamanho do retângulo, que vai do centro da 
                  // janela até a posição onde o usuário clicou com o mouse
                  //xf = ( (2 * win * x) / view_w) - win;
                  //yf = ( ( (2 * win) * (y-view_h) ) / -view_h) - win;
				
			tetaxz = x;
			raioxz = y;
			printf("mouse acionado\n");
				
         }
    glutPostRedisplay();
}

void special(int key, int x, int y){
  switch (key) {
  case GLUT_KEY_UP:
    obs[1]=obs[1]+1;
    glutPostRedisplay();
    break;
  case GLUT_KEY_DOWN:
    obs[1] =obs[1]-1;
    glutPostRedisplay();
    break;
  case GLUT_KEY_LEFT:
    tetaxz=tetaxz+2;
    glutPostRedisplay();
    break;
  case GLUT_KEY_RIGHT:
    tetaxz=tetaxz-2;
    glutPostRedisplay();
    break;
  }
}

void keyboard(unsigned char key, int x, int y){
  switch (key) {
  case 27:
    exit(0);
    break;
  case 'r':
    raioxz=raioxz+1;
    glutPostRedisplay();
    break;
  case 'R':
    raioxz=raioxz-1;
    //if(raioxz==0){
     // raioxz=1;
    //}
    glutPostRedisplay();
    break;  
  case 'o':
    if (eixoy == 90){
      break;
    }
    eixoy = (eixoy + 5);
    glutPostRedisplay();
    
    break;
  	case 'O':
    	if (eixoy == 0){
      		break;
    	}
    	eixoy = (eixoy - 5);
    	glutPostRedisplay();
    break;
	case 'p':
		abre_porta();
		printf("p foi pressionado\n");
	break;
  }
}

void loadTextureFromFile(char *filename,int index)
{

	 int width, height;
   unsigned char* image =
       SOIL_load_image(filename, &width, &height, 0, SOIL_LOAD_RGBA);

			 printf("%d %d\n", width, height);

   glGenTextures(1, &texture_id[index]);
   glBindTexture(GL_TEXTURE_2D, texture_id[index]);

   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

   glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, image);
	 glBindTexture(GL_TEXTURE_2D, 0);
}

void init_textures(){

		loadTextureFromFile("piso_entrada.jpg",0);
		loadTextureFromFile("piso_interno.jpg",1);
		loadTextureFromFile("grama.jpg",2);
		loadTextureFromFile("parede_externa.jpg",3); 
		loadTextureFromFile("porta.jpg"			,4);
}

//iluminacao
void iluminacao_externa(void)
{
	GLfloat especularidade[4]={1.0,1.0,1.0,1.0};
 	GLint especMaterial = 60;	
	// Habilita o modelo de colorização de Gouraud
	glShadeModel(GL_SMOOTH);
	// Define a refletância do material
	glMaterialfv(GL_FRONT_AND_BACK,GL_SPECULAR, especularidade);
 	// Define a concentração do brilho e que sera iluminado nas duas faces e
 	// o tipo do materia
	glMateriali(GL_FRONT_AND_BACK,GL_SHININESS,especMaterial);
	// mistura de tipos de ilumminacao para ficar mais realista e a posicao que
	// ficara a luz(posicaoluz)
	glLightfv(GL_LIGHT0, GL_AMBIENT, luzAmbiente);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, luzDifusa );
	glLightfv(GL_LIGHT0, GL_SPECULAR, luzEspecular );
	glLightfv(GL_LIGHT0, GL_POSITION, posicaoLuz );
	// Habilita a definição da cor do material a partir da cor corrente
	glEnable(GL_COLOR_MATERIAL);
	// Habilita o uso de iluminação
	glEnable(GL_LIGHTING); 
	// Habilita o uso de iluminação
 	glEnable(GL_LIGHT0);
	// A última habilitação glEnable(GL_DEPTH_TEST) permite finalmente habilitar a técnica do Z-Buffer.
 	glEnable(GL_DEPTH_TEST);

}


void init(){

 // compoe_sala();
  glShadeModel(GL_FLAT);
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  glEnable(GL_TEXTURE_2D);

	init_textures();
	compoe_sala();
	//compoe_texturas();
//	init_textures();
}


int main(int argc,char **argv){
  glutInitWindowPosition(0,0);
  glutInitWindowSize(WIDTH,HEIGHT);
  glutInit(&argc,argv);
  glutInitDisplayMode(GLUT_RGB|GLUT_DEPTH|GLUT_DOUBLE);

  	if(!glutCreateWindow("Instituto de Computação - UFAL")) {
    	fprintf(stderr,"Error opening a window.\n");
    	exit(-1);
  	}

  	init();
  
  	glutKeyboardFunc(keyboard);
  	glutSpecialFunc(special);
  	glutDisplayFunc(display);
  	glutReshapeFunc(reshape);
//  	glutMouseFunc(GerenciaMouse);

	glutMouseFunc(mouseButton);
	glutMotionFunc(mouseMove);
	

	//iluminacao antiga
/*
	glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

	glLightfv(GL_LIGHT0, GL_POSITION, posicao_sol);
	glLightfv(GL_LIGHT0, GL_POSITION, posicao_lampada);
*/
	iluminacao_externa();
  	glutMainLoop();



  return(0);
}
